Question 1
----------

CREATE (e1:Person { name: "Tom", country: "Spain", age: 28, sport: "football" });
CREATE (e2:Person { name: "Bill", country: "Ireland", age: 23, sport: "" });

MATCH (r:Person {name:'Mary'}) RETURN e;

MATCH (e:Person {name:'Tom'}), (r:Person {name:'Mary'})
CREATE (e)-[:FRIEND_OF]->(r);


MATCH (e:Person {name:'Bill'}), (r:Person {name:'Mary'})
CREATE (e)-[:FRIEND_OF]->(r);
MATCH (e:Person {name:'Bill'}), (r:Person {name:'Denis'})
CREATE (e)-[:FRIEND_OF]->(r);

- Show the age of Denis and what his friends
MATCH (e:Person {name:"Denis"})-[:FRIEND_OF*1..3]-(e2:Person) RETURN e2;

- Show all the person from Scotland
MATCH (e:Person {country:'Scotland'}) RETURN e;

- Show all the person with age less or equal than 20 from Ireland
MATCH (e:Person {country:'Ireland'}) WHERE e.age <= 20 RETURN e;

- Show  all the person with age less or equal 30 playing football
MATCH (e:Person {sport:'football'}) WHERE e.age <= 30 RETURN e;

- Count the person by country
MATCH (e:Person) RETURN e.country, COUNT(e.country) as population;

- Show the average age of the person group by sport
MATCH (e:Person) RETURN e.sport, AVG(e.age) as avg_sport;

- Show all the direct friends of Mary
MATCH (e:Person {name:"Mary"})-[:FRIEND_OF]->(e2:Person) RETURN e2;

- Show all the friends of Paul with a maximum distance of 5 steps
MATCH (e:Person {name:"Paul"})-[:FRIEND_OF*1..5]->(e2:Person) RETURN e2;

- Count all the friends of Paul with maximum distance 5 steps by nationality
MATCH (e:Person {name:"Paul"})-[:FRIEND_OF*1..5]->(e2:Person) RETURN e2.country, COUNT(e2) as fr_count;

- Show the path(s) between Paul and Jennifer. For each path show the length.
MATCH path = (d:Person {name:"Paul"})-[:FRIEND_OF*..5]->(c:Person {name:"Lisa"})
RETURN path, length(path);


- Show the shortest path between Paul and Lisa.
MATCH
path = shortestPath((e:Student {name:"Paul"})-[:FRIEND_OF*..5]->(m:Student {name:"Lisa"}))
RETURN path

- Show (if exists) a connection between Mary and all her friends, where the path can only
contain persons that play football
MATCH (e:Person {name:"Mary"})
MATCH (e)-[:FRIEND_OF]->(m:Person) WHERE m.sport = 'Football' RETURN path;

MATCH (e:Person {name:"Mary"})
MATCH path = (e)-[:FRIEND_OF]->(m:Person) RETURN path, filter(  n IN nodes(path) WHERE n.sport = 'Football');


MATCH (fb:Person) WHERE fb.sport = 'Football' RETURN fb
UNION
MATCH (e:Person {name:"Mary"})-[:FRIEND_OF*1..5]->(fb) RETURN fb;

Question 2
----------

